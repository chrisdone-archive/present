* TODO Handle empty data decls
* TODO Put type in ExceptionValue
* TODO Add notion of size in output
* TODO Add strict/unstrict fields
* TODO Include storage requirements in the output
* TODO Make Emacs impl.
* TODO Make browser-based demo
* TODO Write test suite
* TODO Support data instances (Data.Vector.Unboxed)
* TODO Existentials
* TODO Support including forall/class context in type printing
* DONE Import template-haskell qualified
  CLOSED: [2016-03-31 Thu 09:50]
  - State "DONE"       from "TODO"       [2016-03-31 Thu 09:50]
* DONE Rename Presentation type to Value
  CLOSED: [2016-03-31 Thu 09:50]
  - State "DONE"       from "TODO"       [2016-03-31 Thu 09:50]
* DONE Test out printing Data.ByteString
  CLOSED: [2016-03-24 Thu 11:19]
  - State "DONE"       from "TODO"       [2016-03-24 Thu 11:19]
* DONE Rewrite from scratch
  CLOSED: [2016-03-18 Fri 10:05]
  - State "DONE"       from "TODO"       [2016-03-18 Fri 10:05]
  - Note taken on [2016-03-17 Thu 12:02] \\
    λ> putStrLn $(do ty <- [t|Either (Switch Char Int) String|]; let {Right normalType = normalizeType ty}; typeDefinitions <- normalTypeDefinitions normalType; (stringE (unlines (map (\(typeConstructor,typeDefinition) -> "-- " ++ show typeConstructor ++ "\n" ++ (pprint (typeDefinitionPrinter typeDefinition))) typeDefinitions))))
    -- TypeConstructor Data.Either.Either
    presentCons_Dataz2eEitherz2eEither = \presentVar_az5f1627418053 presentVar_bz5f1627418054 -> ("Data.Either.Either",
                                                                                                  \case
                                                                                                      Data.Either.Left indexedField_0 -> Present.DataTypePresentation "Data.Either.Left" [Data.Tuple.snd presentVar_az5f1627418053 indexedField_0]
                                                                                                      Data.Either.Right indexedField_0 -> Present.DataTypePresentation "Data.Either.Right" [Data.Tuple.snd presentVar_bz5f1627418054 indexedField_0])
    -- TypeConstructor Ghci3.Switch
    presentCons_Ghci3z2eSwitch = "TODO: typeAliasPrinter"
    -- TypeConstructor GHC.Types.Char
    presentCons_GHCz2eTypesz2eChar = ("GHC.Types.Char",
                                      \case
                                          GHC.Types.C# indexedField_0 -> Present.DataTypePresentation "GHC.Types.C#" [Data.Tuple.snd presentCons_GHCz2ePrimz2eCharz23 indexedField_0])
    -- TypeConstructor GHC.Prim.Char#
    presentCons_GHCz2ePrimz2eCharz23 = "TODO: primitivePrinter"
    -- TypeConstructor GHC.Types.Int
    presentCons_GHCz2eTypesz2eInt = ("GHC.Types.Int",
                                     \case
                                         GHC.Types.I# indexedField_0 -> Present.DataTypePresentation "GHC.Types.I#" [Data.Tuple.snd presentCons_GHCz2ePrimz2eIntz23 indexedField_0])
    -- TypeConstructor GHC.Prim.Int#
    presentCons_GHCz2ePrimz2eIntz23 = "TODO: primitivePrinter"
    -- TypeConstructor GHC.Base.String
    presentCons_GHCz2eBasez2eString = "TODO: typeAliasPrinter"
    -- TypeConstructor GHC.Types.[]
    presentCons_GHCz2eTypesz2ez5bz5d = \presentVar_az5f822083586 -> ("GHC.Types.[]",
                                                                     \case
                                                                         GHC.Types.[] -> Present.DataTypePresentation "GHC.Types.[]" []
                                                                         (GHC.Types.:) indexedField_0
                                                                                       indexedField_1 -> Present.DataTypePresentation "GHC.Types.:" [Data.Tuple.snd presentVar_az5f822083586 indexedField_0,
                                                                                                                                                     Data.Tuple.snd (presentCons_GHCz2eTypesz2ez5bz5d presentVar_az5f822083586) indexedField_1])

    λ>
  - Note taken on [2016-03-17 Thu 11:05] \\
    Got this far:

    λ> putStrLn $(do ty <- [t|Either (X (Maybe Int) Integer) String|]; let {Right normalType = normalizeType ty}; typeDefinitions <- normalTypeDefinitions normalType; (stringE (unlines (map (\(typeConstructor,typeDefinition) -> show typeConstructor ++ " " ++ take 60 (show typeDefinition)) typeDefinitions))))
    TypeConstructor Data.Either.Either DataTypeDefinition (DataType {typeVariables = [TypeVariable
    TypeConstructor Ghci8.X DataTypeDefinition (DataType {typeVariables = [], typeConstr
    TypeConstructor Ghci7.List DataTypeDefinition (DataType {typeVariables = [TypeVariable
    TypeConstructor GHC.Types.Int DataTypeDefinition (DataType {typeVariables = [], typeConstr
    TypeConstructor GHC.Prim.Int# PrimitiveDefinition (PrimitiveType {primitiveVariables = 0,
    TypeConstructor GHC.Base.Maybe DataTypeDefinition (DataType {typeVariables = [TypeVariable
    TypeConstructor GHC.Integer.Type.Integer DataTypeDefinition (DataType {typeVariables = [], typeConstr
    TypeConstructor GHC.Integer.Type.BigNat DataTypeDefinition (DataType {typeVariables = [], typeConstr
    TypeConstructor GHC.Prim.ByteArray# PrimitiveDefinition (PrimitiveType {primitiveVariables = 0,
    TypeConstructor GHC.Base.String TypeAliasDefinition (TypeAlias {aliasVariables = [], aliasTy
    TypeConstructor GHC.Types.[] DataTypeDefinition (DataType {typeVariables = [TypeVariable
    TypeConstructor GHC.Types.Char DataTypeDefinition (DataType {typeVariables = [], typeConstr
    TypeConstructor GHC.Prim.Char# PrimitiveDefinition (PrimitiveType {primitiveVariables = 0,
  CLOCK: [2016-03-17 Thu 11:05]--[2016-03-17 Thu 11:07] =>  0:02
* DONE Support type-variables
  CLOSED: [2016-03-21 Mon 17:33]
  - State "DONE"       from "TODO"       [2016-03-21 Mon 17:33]
* DONE Support including type in the presentation
  CLOSED: [2016-03-21 Mon 17:34]
  - State "DONE"       from "TODO"       [2016-03-21 Mon 17:34]
* DONE Support printing functions
  CLOSED: [2016-03-23 Wed 17:03]
  - State "DONE"       from "TODO"       [2016-03-23 Wed 17:03]
* DONE Need to add type-signatures to retain let generalization
  CLOSED: [2016-03-23 Wed 22:17]
  - State "DONE"       from "TODO"       [2016-03-23 Wed 22:17]
data X a b = Cons a b (X b a) | Nil
:presentDebug Cons 'a' (1 ::Int) Nil
* DONE Tuples
  CLOSED: [2016-03-23 Wed 21:01]
  - State "DONE"       from "TODO"       [2016-03-23 Wed 21:01]
* DONE Lists
  CLOSED: [2016-03-23 Wed 21:18]
  - State "DONE"       from "TODO"       [2016-03-23 Wed 21:18]

* DONE Print primitives (Int, Char, etc.)
  CLOSED: [2016-03-23 Wed 22:39]
  - State "DONE"       from "TODO"       [2016-03-23 Wed 22:39]
* DONE Support printing lists
  CLOSED: [2016-03-23 Wed 22:56]
  - State "DONE"       from "TODO"       [2016-03-23 Wed 22:56]
* DONE Support printing [Char] as "foo" instead of ['f','o','o']
  CLOSED: [2016-03-24 Thu 11:05]
  - State "DONE"       from "TODO"       [2016-03-24 Thu 11:05]
* DONE Implement defaulting (Num, Show, Read)
  CLOSED: [2016-03-24 Thu 11:18]
  - State "DONE"       from "TODO"       [2016-03-24 Thu 11:18]
* DONE Add choice type
  CLOSED: [2016-03-23 Wed 23:07]
  - State "DONE"       from "TODO"       [2016-03-23 Wed 23:07]
* DONE Write printers (text, structured-lazy)
  CLOSED: [2016-03-24 Thu 11:27]
  - State "DONE"       from "TODO"       [2016-03-24 Thu 11:27]
* DONE Add built-in printers for specific types like Text, ByteString, Map, etc.
  CLOSED: [2016-03-24 Thu 16:22]
  - State "DONE"       from "TODO"       [2016-03-24 Thu 16:22]
  CLOCK: [2016-03-24 Thu 15:53]--[2016-03-24 Thu 16:22] =>  0:29
* DONE Support record types in output
  CLOSED: [2016-03-24 Thu 22:47]
  - State "DONE"       from "TODO"       [2016-03-24 Thu 22:47]
* DONE Support exception catching
  CLOSED: [2016-03-25 Fri 11:26]
  - State "DONE"       from "TODO"       [2016-03-25 Fri 11:26]
* DONE Support extension via classes (incl. passing a default printer)
  CLOSED: [2016-03-25 Fri 22:38]
  - State "DONE"       from "TODO"       [2016-03-25 Fri 22:38]
* DONE Write lazy ID-based printer
  CLOSED: [2016-03-31 Thu 15:51]
  - State "DONE"       from "TODO"       [2016-03-31 Thu 15:51]
  CLOCK: [2016-03-31 Thu 14:31]--[2016-03-31 Thu 14:31] =>  0:00
* DONE Make choice for list of lazy cons by cons or full
  CLOSED: [2016-03-31 Thu 15:51]
  - State "DONE"       from "TODO"       [2016-03-31 Thu 15:51]
* DONE Implement JSON output
  CLOSED: [2016-03-31 Thu 22:49]
  - State "DONE"       from "TODO"       [2016-03-31 Thu 22:49]
